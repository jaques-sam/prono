on: [push, pull_request, workflow_dispatch]

name: CI

env:
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  DB_HOST_OVERRIDE: ${{ secrets.DB_PRONO_HOST_OVERRIDE }}
  DB_PORT_OVERRIDE: ${{ secrets.DB_PRONO_PORT_OVERRIDE }}
  DB_USER_OVERRIDE: ${{ secrets.DB_PRONO_USER_OVERRIDE }}
  DB_PASS_OVERRIDE: ${{ secrets.DB_PRONO_PASS_OVERRIDE }}
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features

  check_wasm:
    name: Check wasm32
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features --package prono-app --target wasm32-unknown-unknown

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install dependencies
        run: sudo apt-get install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
      - name: Install binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - name: Install cargo tools
        run: cargo binstall cargo-nextest grcov --secure
      - name: Add llvm tools component
        run: rustup component add llvm-tools-preview
      - uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin coverage_generator

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  trunk:
    name: trunk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.83.0
          target: wasm32-unknown-unknown
          override: true
      - name: Download and install Trunk binary
        run: wget -qO- https://github.com/thedodd/trunk/releases/latest/download/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
      - name: Build
        run: ./trunk build --config ./app

  build_app:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
          TARGET: aarch64-apple-darwin

        - os: ubuntu-latest
          TARGET: aarch64-unknown-linux-gnu

        - os: ubuntu-latest
          TARGET: armv7-unknown-linux-gnueabihf

        - os: ubuntu-latest
          TARGET: x86_64-unknown-linux-gnu

        - os: windows-latest
          TARGET: x86_64-pc-windows-msvc
          EXTENSION: .exe

    steps:
    - name: Building ${{ matrix.TARGET }}
      run: echo "${{ matrix.TARGET }}"

    - uses: actions/checkout@master
    - name: Install build dependencies - Rustup
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable --profile default --target ${{ matrix.TARGET }} -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install cross
      run: cargo install cross

    - name: Build
      run: cross build --verbose --release --target=${{ matrix.TARGET }} --package prono-app

    - name: Rename
      run: cp target/${{ matrix.TARGET }}/release/prono-app${{ matrix.EXTENSION }} prono-app-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

    - uses: actions/upload-artifact@master
      with:
        name: prono-app-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        path: prono-app-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

    - uses: svenstaro/upload-release-action@v2
      name: Upload binaries to release
      if: ${{ github.event_name == 'push' && startsWith(github.ref_name, 'release') }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: prono-app-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        asset_name: prono-app-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        tag: ${{ github.ref }}
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        overwrite: true
